name: CI

on:
  push:
    branches:
      - 'main'
  pull_request:
    paths-ignore:
      - '.vscode/**'

# Automatically cancel in-progress actions on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  # Lint can run in parallel with Build.
  # We also run `yarn install` with the `--prefer-offline` flag to speed things up.
  lint:
    name: Lint
    if: ${{ !contains(github.event.head_commit.message, '[skip-ci]') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'

      - name: Install NPM Dependencies
        run: yarn install --prefer-offline --frozen-lockfile --ignore-engines
        env:
          CI: true
      
      - name: Status
        run: git status

      - name: Lint
        uses: wearerequired/lint-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prettier: true
          auto_fix: true
          git_name: GitHub Action
          git_email: github-action@users.noreply.github.com
          commit_message: '[ci] ${linter} fix'
          github_token: ${{ secrets.GITHUB_TOKEN }}

  # Build installs all devDependencies and runs our full build pipeline.
  # We upload all `dist/` artifacts to GitHub, which can be shared by all dependent jobs.
  build:
    name: Build Packages
    if: ${{ !contains(github.event.head_commit.message, '[skip-ci]') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'

      - name: Install NPM Dependencies
        run: yarn install --frozen-lockfile --ignore-engines --registry https://registry.npmjs.org --network-timeout 300000
        env:
          CI: true

      - name: Build Packages
        run: yarn build

      - name: Upload Package Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: packages/**/dist/*
          if-no-files-found: error
  
  # Test depends on Build's output, which allows us to skip any build process!
  # We also run `yarn install` with the `--prefer-offline` flag to speed things up.
  test:
    name: 'Test: ${{ matrix.os }} (node@${{ matrix.node_version }})'
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node_version: [12, 14, 16]
        include:
          - os: windows-latest
            node_version: 16
          - os: macos-latest
            node_version: 16
      fail-fast: false
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup node@${{ matrix.node_version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'yarn'

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2

      - name: Extract Artifacts
        run: ./.github/extract-artifacts.sh

      - name: Install NPM Dependencies
        run: yarn install --prefer-offline --frozen-lockfile --ignore-engines
        env:
          CI: true

      - name: Test
        run: yarn test

  # smoke:
  #   name: 'Smoke Test: ${{ matrix.target }}'
  #   runs-on: ubuntu-latest
  #   if: "!contains(github.event.head_commit.message, '[skip-ci]')"
  #   strategy:
  #     matrix:
  #       target: [docs, www]
  #   needs:
  #     - build
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Setup Node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: 16
  #         cache: 'yarn'

  #     - name: Download Build Artifacts
  #       uses: actions/download-artifact@v2

  #     - name: Extract Artifacts
  #       run: ./.github/extract-artifacts.sh

  #     - name: Install NPM Dependencies
  #       run: yarn install --frozen-lockfile --ignore-engines --registry https://registry.npmjs.org --network-timeout 300000
  #       env:
  #         CI: true

  #     - name: Build
  #       run: yarn build
  #       working-directory: ${{ matrix.target }}

  # Changelog can only run _after_ Build and Test.
  # We download all `dist/` artifacts from GitHub to skip the build process.
  changelog:
    name: Changelog PR or Release
    if: ${{ !contains(github.event.head_commit.message, '[skip-ci]') && github.ref_name == 'main' }}
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v2

      - name: Extract Artifacts
        run: ./.github/extract-artifacts.sh

      - name: Install NPM Dependencies
        run: yarn install --prefer-offline --frozen-lockfile --ignore-engines
        env:
          CI: true
      
      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          publish: yarn changeset publish
          commit: '[ci] release'
          title: '[ci] release'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Setup GPR
        if: steps.changesets.outputs.published == 'true'
        uses: actions/setup-node@v2
        with:
          registry-url: 'https://npm.pkg.github.com'

      - name: Publish to GPR
        if: steps.changesets.outputs.published == 'true'
        uses: changesets/action@v1
        with:
          publish: yarn changeset publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Generate Notification
      #   id: notification
      #   if: steps.changesets.outputs.published == 'true'
      #   run: message=$(node scripts/notify/index.js '${{ steps.changesets.outputs.publishedPackages }}') && echo ::set-output name=message::${message//$'\n'/'%0A'}

      # - name: Discord Notification
      #   if: steps.changesets.outputs.published == 'true'
      #   id: discord-notification
      #   env:
      #     DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      #   uses: Ilshidur/action-discord@0.3.2
      #   with:
      #     args: ${{ steps.notification.outputs.message }}
